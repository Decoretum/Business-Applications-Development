GUIDE FOR EFFICIENT DJANGO: (By Gael)

First of all, know the purpose of your project.


User authentication
After knowing the purpose, start creating python models for user authentication. 
You then proceed to develop views pages for user authentication first.

Displaying of User data as well as Product/service data of interests
Proceed to create models for product/service data, and create views pages for these. This includes 
request.session (User data) as well as querying objects. Remember to use primary and foreign keys as well
to display data and zoom in to those data.


IMAGE ACCEPTANCE:

1. Set up MEDIA_URL and MEDIA_ROOT

MEDIA_URL is the URL of you media files, hence it will be where your media/image files will go.
ex. /media/. It is a placeholder for the url a client will use to access the /media/ files.
We use this in order for the client to access our media not just from our local system
but from an external storage like database when viewing the application.

MEDIA_ROOT is the Absolute filesystem path to the directory that will hold user-uploaded files.
We then connect the BASE_DIR to our new /media/ url of our MEDIA_URL.
HENCE, when we have the upload_to field in our model, the file will be uploaded to the directory within
MEDIA_ROOT/<directory specified in model>
ex. MEDIA_ROOT = os.path.join(BASE_DIR, 'media') 2nd argument is the directory of our MEDIA_URL




Back-End Functional done:
1 Log into the system: Done
2 Display Materials information: Done
3 View Transactions: done
4 Add new Transactions: Done
5 Edit Transaction : Done
6 Add Inventory Item / Product : Done
7 Remove Inventory item from website : Done
8 Edit Inventory item / Product from website: Done


My Beautiful Algorithm for a good Front-End
'''def Users(request):
    condition = ""
    if request.user.is_authenticated:
        condition = True
    
        if request.session.get('NAVIGATE') == "confirmorder" or request.session.get('NAVIGATE') == "confirmtrans":
            print('DELETED CACHE')
            request.session['Remarks'] = None
            request.session['productname'] = None
            request.session['OrderedPRem'] = None
            request.session['OrderPname'] = None
            request.session['manufacturer'] = None
            request.session['Order'] = None

        request.session['NAVIGATE'] = "users"

        currentuser = get_object_or_404(Userperson, username = request.session['user'])
        FinalOrders = FinalOrder.objects.all() #order numbers
        ProductsinOrder = OrderedProduct.objects.all()
        Ordersarray=[]
        Allarray = []

        
        for x in FinalOrders: #1 
            Allarray.append(x.pk)

        for x in range(0,len(FinalOrders)): #2
            Ordersarray.append([Allarray[x]])
         
        #3
        #Might need to use pointers
        #runtime of O(n^2), but speed not a priority in functional requirement
        i = 0 #pointer for reference array
        j = 0 #pointer for main array
        while i <= len(Allarray) - 1:
            for prod in ProductsinOrder:
                if Allarray[i] == prod.OrderID.pk:
                    Ordersarray[j].append((prod))
                
            i += 1
            j += 1

        print(Allarray)
        print(Ordersarray)
        
    
        return render(request,'Inventory/users.html',
        {
        'C' : condition,
        'Order' : FinalOrders,
        'Products' : ProductsinOrder,
        'OrdersAndProds' : Ordersarray
        })

    else:
        condition = False
        return render(request,'Inventory/users.html',
        {'username' : request.session['user'],
        'userid' : request.session['userid'],
        'password' : request.session['password'],
        'firstname' : request.session['firstname'],
        'lastname' : request.session['lastname'],
        'birthday' : request.session['birthday'],
        'sex' : request.session['sex'],
        'userobj' : currentuser,
        'C' : condition})
'''






